/*
 * Copyright (C) 2016 RTAndroid Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package rtandroid.ballsort.blocks.color.classifier;

import android.os.Environment;
import android.util.Log;

import org.neuroph.core.NeuralNetwork;
import org.neuroph.core.Neuron;
import org.neuroph.core.data.DataSet;
import org.neuroph.core.data.DataSetRow;
import org.neuroph.core.events.LearningEvent;
import org.neuroph.nnet.MultiLayerPerceptron;
import org.neuroph.nnet.learning.BackPropagation;

import java.io.File;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;

import rtandroid.ballsort.MainActivity;
import rtandroid.ballsort.blocks.color.ColorConverter;
import rtandroid.ballsort.blocks.color.ColorData;
import rtandroid.ballsort.blocks.color.space.ColorHSV;
import rtandroid.ballsort.blocks.color.space.ColorLAB;
import rtandroid.ballsort.blocks.color.space.ColorRGB;

public class NeuronalColorClassifier implements IColorClassifier
{
    private static final String NETWORK_FILENAME = Environment.getExternalStorageDirectory().getAbsolutePath() + "/colors.nnet";
    private static final int INPUT_COUNT = (2 + 2 + 2) + (1 + 1 + 1) + (1 + 1 + 1); // RGB + HSV + LAB;
    private static final int OUTPUT_COUNT = ColorData.values().length - 1;          // don't detect EMPTY
    private static final int HIDDEN_NEURONS = INPUT_COUNT * OUTPUT_COUNT;

    private static final double[][] BLACK_DATA = new double[][]
    {
            {0.00390625,0.0,0.00390625,0.79296875,0.00390625,0.55078125,0.0,0.0,0.003921568859368563,0.003921569019607843,0.49990288215686274,0.49982582372549017,},
            {0.00390625,0.0,0.00390625,0.7578125,0.00390625,0.51953125,0.0,0.0,0.003921568859368563,0.003921569019607843,0.49990288215686274,0.49982582372549017,},
            {0.00390625,0.0,0.00390625,0.7421875,0.00390625,0.5078125,0.0,0.0,0.003921568859368563,0.003921569019607843,0.49990288215686274,0.49982582372549017,},
            {0.00390625,0.0,0.00390625,0.7265625,0.00390625,0.4921875,0.0,0.0,0.003921568859368563,0.003921569019607843,0.49990288215686274,0.49982582372549017,},
            {0.00390625,0.0,0.00390625,0.71875,0.00390625,0.48828125,0.0,0.0,0.003921568859368563,0.003921569019607843,0.49990288215686274,0.49982582372549017,},
            {0.00390625,0.0,0.00390625,0.703125,0.00390625,0.4765625,0.0,0.0,0.003921568859368563,0.003921569019607843,0.49990288215686274,0.49982582372549017,},
            {0.00390625,0.0,0.00390625,0.6953125,0.00390625,0.46875,0.0,0.0,0.003921568859368563,0.003921569019607843,0.49990288215686274,0.49982582372549017,},
            {0.00390625,0.0,0.00390625,0.6875,0.00390625,0.46484375,0.0,0.0,0.003921568859368563,0.003921569019607843,0.49990288215686274,0.49982582372549017,},
            {0.00390625,0.0,0.00390625,0.64453125,0.00390625,0.43359375,0.0,0.0,0.003921568859368563,0.003921569019607843,0.49990288215686274,0.49982582372549017,},
            {0.00390625,0.0,0.00390625,0.75,0.00390625,0.5390625,0.0,0.0,0.003921568859368563,0.003921569019607843,0.49990288215686274,0.49982582372549017,},
            {0.00390625,0.0,0.00390625,0.8203125,0.00390625,0.57421875,0.0,0.0,0.003921568859368563,0.003921569019607843,0.49990288215686274,0.49982582372549017,},
            {0.00390625,0.0,0.00390625,0.81640625,0.00390625,0.5703125,0.0,0.0,0.003921568859368563,0.003921569019607843,0.49990288215686274,0.49982582372549017,},
            {0.00390625,0.0,0.00390625,0.83984375,0.00390625,0.58984375,0.0,0.0,0.003921568859368563,0.003921569019607843,0.49990288215686274,0.49982582372549017,},
            {0.00390625,0.0,0.00390625,0.796875,0.00390625,0.55859375,0.0,0.0,0.003921568859368563,0.003921569019607843,0.49990288215686274,0.49982582372549017,},
            {0.00390625,0.0,0.00390625,0.8125,0.00390625,0.56640625,0.0,0.0,0.003921568859368563,0.003921569019607843,0.49990288215686274,0.49982582372549017,},
            {0.00390625,0.0,0.00390625,0.80859375,0.00390625,0.5625,0.0,0.0,0.003921568859368563,0.003921569019607843,0.49990288215686274,0.49982582372549017,},
            {0.00390625,0.0,0.00390625,0.7421875,0.00390625,0.515625,0.0,0.0,0.003921568859368563,0.003921569019607843,0.49990288215686274,0.49982582372549017,},
            {0.00390625,0.0,0.00390625,0.84375,0.00390625,0.58984375,0.0,0.0,0.003921568859368563,0.003921569019607843,0.49990288215686274,0.49982582372549017,},
            {0.00390625,0.0,0.00390625,0.76171875,0.00390625,0.52734375,0.0,0.0,0.003921568859368563,0.003921569019607843,0.49990288215686274,0.49982582372549017,},
            {0.00390625,0.0,0.00390625,0.8046875,0.00390625,0.58984375,0.0,0.0,0.003921568859368563,0.003921569019607843,0.49990288215686274,0.49982582372549017,},
    };

    private static final double[][] BLUE_DATA = new double[][]
    {
    };

    private static final double[][] GREEN_DATA = new double[][]
    {
            {0.0078125,0.0,0.0078125,0.890625,0.0078125,0.109375,0.0,0.0,0.007843137718737125,0.007843138039215686,0.4998057643137255,0.4996516474509804,},
            {0.0078125,0.0,0.01171875,0.07421875,0.0078125,0.1796875,0.3333333333333333,0.3333333432674408,0.0117647061124444,0.010647656470588233,0.49910463470588234,0.5008201968627451,},
            {0.0078125,0.0,0.01171875,0.18359375,0.0078125,0.23828125,0.3333333333333333,0.3333333432674408,0.0117647061124444,0.010647656470588233,0.49910463470588234,0.5008201968627451,},
            {0.0078125,0.0,0.0078125,0.9140625,0.0078125,0.09765625,0.0,0.0,0.007843137718737125,0.007843138039215686,0.4998057643137255,0.4996516474509804,},
            {0.0078125,0.0,0.01171875,0.04296875,0.0078125,0.16796875,0.3333333333333333,0.3333333432674408,0.0117647061124444,0.010647656470588233,0.49910463470588234,0.5008201968627451,},
            {0.0078125,0.0,0.01171875,0.25,0.0078125,0.28125,0.3333333333333333,0.3333333432674408,0.0117647061124444,0.010647656470588233,0.49910463470588234,0.5008201968627451,},
            {0.0078125,0.0,0.01171875,0.015625,0.0078125,0.15234375,0.3333333333333333,0.3333333432674408,0.0117647061124444,0.010647656470588233,0.49910463470588234,0.5008201968627451,},
            {0.0078125,0.0,0.0078125,0.8828125,0.0078125,0.05078125,0.0,0.0,0.007843137718737125,0.007843138039215686,0.4998057643137255,0.4996516474509804,},
            {0.0078125,0.0,0.0078125,0.80859375,0.0078125,0.0234375,0.0,0.0,0.007843137718737125,0.007843138039215686,0.4998057643137255,0.4996516474509804,},
            {0.0078125,0.0,0.0078125,0.6953125,0.00390625,0.9765625,0.16666666666666666,0.5,0.007843137718737125,0.0075600988235294125,0.49959348490196076,0.5013734692156863,},
    };

    private static final double[][] RED_DATA = new double[][]
    {
            {0.01171875,0.0,0.0078125,0.03515625,0.00390625,0.75390625,0.08333333333333333,0.6666666865348816,0.0117647061124444,0.008394110196078433,0.49998521725490197,0.5017525652941176,},
            {0.015625,0.0,0.0078125,0.19140625,0.00390625,0.859375,0.05555555555555555,0.75,0.01568627543747425,0.009228121568627451,0.5003769496078432,0.502131661372549,},
            {0.015625,0.0,0.0078125,0.16015625,0.00390625,0.8359375,0.05555555555555555,0.75,0.01568627543747425,0.009228121568627451,0.5003769496078432,0.502131661372549,},
            {0.015625,0.0,0.0078125,0.125,0.00390625,0.81640625,0.05555555555555555,0.75,0.01568627543747425,0.009228121568627451,0.5003769496078432,0.502131661372549,},
            {0.01171875,0.0,0.0078125,0.05078125,0.00390625,0.7734375,0.08333333333333333,0.6666666865348816,0.0117647061124444,0.008394110196078433,0.49998521725490197,0.5017525652941176,},
            {0.015625,0.0,0.0078125,0.2421875,0.00390625,0.89453125,0.05555555555555555,0.75,0.01568627543747425,0.009228121568627451,0.5003769496078432,0.502131661372549,},
            {0.015625,0.0,0.0078125,0.2265625,0.00390625,0.84375,0.05555555555555555,0.75,0.01568627543747425,0.009228121568627451,0.5003769496078432,0.502131661372549,},
            {0.015625,0.0,0.0078125,0.08203125,0.00390625,0.78125,0.05555555555555555,0.75,0.01568627543747425,0.009228121568627451,0.5003769496078432,0.502131661372549,},
            {0.015625,0.0,0.0078125,0.10546875,0.00390625,0.78125,0.05555555555555555,0.75,0.01568627543747425,0.009228121568627451,0.5003769496078432,0.502131661372549,},
            {0.01171875,0.0,0.0078125,0.03515625,0.00390625,0.73046875,0.08333333333333333,0.6666666865348816,0.0117647061124444,0.008394110196078433,0.49998521725490197,0.5017525652941176,},
            {0.01171875,0.0,0.00390625,0.99609375,0.00390625,0.71484375,0.0,0.6666666865348816,0.0117647061124444,0.005589591764705883,0.500686346862745,0.5005840158823529,},
            {0.015625,0.0,0.0078125,0.20703125,0.00390625,0.86328125,0.05555555555555555,0.75,0.01568627543747425,0.009228121568627451,0.5003769496078432,0.502131661372549,},
            {0.01171875,0.0,0.00390625,0.99609375,0.00390625,0.6953125,0.0,0.6666666865348816,0.0117647061124444,0.005589591764705883,0.500686346862745,0.5005840158823529,},
            {0.015625,0.0,0.0078125,0.11328125,0.00390625,0.80859375,0.05555555555555555,0.75,0.01568627543747425,0.009228121568627451,0.5003769496078432,0.502131661372549,},
            {0.015625,0.0,0.0078125,0.32421875,0.00390625,0.93359375,0.05555555555555555,0.75,0.01568627543747425,0.009228121568627451,0.5003769496078432,0.502131661372549,},
            {0.015625,0.0,0.0078125,0.0703125,0.00390625,0.7734375,0.05555555555555555,0.75,0.01568627543747425,0.009228121568627451,0.5003769496078432,0.502131661372549,},
            {0.01171875,0.0,0.0078125,0.0625,0.00390625,0.76171875,0.08333333333333333,0.6666666865348816,0.0117647061124444,0.008394110196078433,0.49998521725490197,0.5017525652941176,},
            {0.01171875,0.0,0.0078125,0.0625,0.00390625,0.74609375,0.08333333333333333,0.6666666865348816,0.0117647061124444,0.008394110196078433,0.49998521725490197,0.5017525652941176,},
    };

    private static final double[][] YELLOW_DATA = new double[][]
    {
            {0.0234375,0.0,0.0234375,0.375,0.01171875,0.25,0.16666666666666666,0.5,0.0235294122248888,0.022680296470588234,0.49878045470588234,0.5041204076470588,},
            {0.02734375,0.0,0.02734375,0.390625,0.01171875,0.640625,0.16666666666666666,0.5714285969734192,0.027450980618596077,0.026318826274509804,0.4984710574509804,0.5056680531372549,},
            {0.0234375,0.0,0.0234375,0.890625,0.01171875,0.43359375,0.16666666666666666,0.5,0.0235294122248888,0.022680296470588234,0.49878045470588234,0.5041204076470588,},
            {0.0234375,0.0,0.0234375,0.84375,0.01171875,0.39453125,0.16666666666666666,0.5,0.0235294122248888,0.022680296470588234,0.49878045470588234,0.5041204076470588,},
            {0.0234375,0.0,0.0234375,0.5625,0.01171875,0.28125,0.16666666666666666,0.5,0.0235294122248888,0.022680296470588234,0.49878045470588234,0.5041204076470588,},
            {0.0234375,0.0,0.0234375,0.890625,0.01171875,0.4140625,0.16666666666666666,0.5,0.0235294122248888,0.022680296470588234,0.49878045470588234,0.5041204076470588,},
            {0.0234375,0.0,0.0234375,0.66015625,0.01171875,0.34765625,0.16666666666666666,0.5,0.0235294122248888,0.022680296470588234,0.49878045470588234,0.5041204076470588,},
            {0.0234375,0.0,0.0234375,0.25,0.01171875,0.1953125,0.16666666666666666,0.5,0.0235294122248888,0.022680296470588234,0.49878045470588234,0.5041204076470588,},
            {0.01953125,0.0,0.0234375,0.2109375,0.01171875,0.171875,0.21944444444444444,0.5,0.0235294122248888,0.021846285098039212,0.4983887223529412,0.5037413115686274,},
            {0.01953125,0.0,0.01953125,0.91015625,0.01171875,0.03515625,0.16666666666666666,0.4000000059604645,0.019607843831181526,0.019041766666666664,0.4990898519607843,0.5025727621568628,},
    };

    private static final double[][] WHITE_DATA = new double[][]
    {
            {0.0234375,0.0,0.02734375,0.87109375,0.01953125,0.66796875,0.25,0.2857142984867096,0.027450980618596077,0.026050893333333335,0.49850388392156864,0.5018453135294118,},
            {0.0234375,0.0,0.02734375,0.64453125,0.01953125,0.52734375,0.25,0.2857142984867096,0.027450980618596077,0.026050893333333335,0.49850388392156864,0.5018453135294118,},
            {0.0234375,0.0,0.02734375,0.72265625,0.01953125,0.59765625,0.25,0.2857142984867096,0.027450980618596077,0.026050893333333335,0.49850388392156864,0.5018453135294118,},
            {0.02734375,0.0,0.03125,0.80078125,0.0234375,0.3046875,0.25,0.25,0.0313725508749485,0.029972462352941175,0.4984067660784314,0.501671137254902,},
            {0.02734375,0.0,0.03125,0.99609375,0.0234375,0.54296875,0.25,0.25,0.0313725508749485,0.029972462352941175,0.4984067660784314,0.501671137254902,},
            {0.02734375,0.0,0.03515625,0.27734375,0.0234375,0.6640625,0.2777777777777778,0.3333333432674408,0.03529411926865578,0.03277698078431372,0.49770563647058824,0.5028396866666667,},
            {0.02734375,0.0,0.03125,0.578125,0.0234375,0.16796875,0.25,0.25,0.0313725508749485,0.029972462352941175,0.4984067660784314,0.501671137254902,},
            {0.02734375,0.0,0.03125,0.19921875,0.01953125,0.890625,0.21944444444444444,0.375,0.0313725508749485,0.0296894231372549,0.49819448666666666,0.5033929590196078,},
            {0.02734375,0.0,0.03125,0.34375,0.01953125,0.99609375,0.21944444444444444,0.375,0.0313725508749485,0.0296894231372549,0.49819448666666666,0.5033929590196078,},
            {0.02734375,0.0,0.03125,0.94921875,0.0234375,0.3828125,0.25,0.25,0.0313725508749485,0.029972462352941175,0.4984067660784314,0.501671137254902,},
            {0.02734375,0.0,0.03125,0.8828125,0.0234375,0.4140625,0.25,0.25,0.0313725508749485,0.029972462352941175,0.4984067660784314,0.501671137254902,},
            {0.02734375,0.0,0.03125,0.37890625,0.01953125,0.99609375,0.21944444444444444,0.375,0.0313725508749485,0.0296894231372549,0.49819448666666666,0.5033929590196078,},
            {0.02734375,0.0,0.03125,0.38671875,0.01953125,0.984375,0.21944444444444444,0.375,0.0313725508749485,0.0296894231372549,0.49819448666666666,0.5033929590196078,},
            {0.02734375,0.0,0.03125,0.140625,0.01953125,0.90625,0.21944444444444444,0.375,0.0313725508749485,0.0296894231372549,0.49819448666666666,0.5033929590196078,},
            {0.02734375,0.0,0.03515625,0.078125,0.0234375,0.4765625,0.2777777777777778,0.3333333432674408,0.03529411926865578,0.03277698078431372,0.49770563647058824,0.5028396866666667,},
            {0.03125,0.0,0.03515625,0.4765625,0.0234375,0.7890625,0.21944444444444444,0.3333333432674408,0.03529411926865578,0.033610992156862744,0.4980973688235294,0.503218782745098,},
            {0.03125,0.0,0.03515625,0.25390625,0.0234375,0.69140625,0.21944444444444444,0.3333333432674408,0.03529411926865578,0.033610992156862744,0.4980973688235294,0.503218782745098,},
    };

    private static final HashMap<ColorData, double[][]> sTrainingData = new HashMap<>();
    static
    {
        sTrainingData.put(ColorData.BLACK,  BLACK_DATA);
        sTrainingData.put(ColorData.BLUE,   BLUE_DATA);
        sTrainingData.put(ColorData.GREEN,  GREEN_DATA);
        sTrainingData.put(ColorData.RED,    RED_DATA);
        sTrainingData.put(ColorData.YELLOW, YELLOW_DATA);
        sTrainingData.put(ColorData.WHITE,  WHITE_DATA);
    }

    private static double[] createInputs(ColorRGB colorRGB)
    {
        double[] result = new double[INPUT_COUNT];

        ColorHSV colorHSV = ColorConverter.rgb2hsv(colorRGB);
        ColorLAB colorLAB = ColorConverter.rgb2lab(colorRGB);

        // fill the normalized RGB data
        result[0] = ((colorRGB.R >> 8) & 0xFF) / 256.0;
        result[1] = (colorRGB.R & 0xFF) / 256;
        result[2] = ((colorRGB.G >> 8) & 0xFF) / 256.0;
        result[3] = (colorRGB.G & 0xFF) / 256.0;
        result[4] = ((colorRGB.B >> 8) & 0xFF) / 256.0;
        result[5] = (colorRGB.B & 0xFF) / 256.0;

        // fill the normalized HSV data
        result[6] = colorHSV.H / 360.0;
        result[7] = colorHSV.S;
        result[8] = colorHSV.V;

        // fill the normalized LAB data
        result[9] = colorLAB.L;
        result[10] = (colorLAB.A + 1.0) / 2.0;
        result[11] = (colorLAB.B + 1.0) / 2.0;

        StringBuilder builder = new StringBuilder();
        for (double v : result) { builder.append(v).append(","); }
        Log.d(MainActivity.TAG, "{" + builder.toString() + "},");

        return result;
    }

    /**
     * The actual neural network instance. Created in the constructor.
     */
    private NeuralNetwork mNetwork = null;

    /**
     * Constructor takes care of network creation and initialization.
     */
    public NeuronalColorClassifier()
    {
        File networkFile = new File(NETWORK_FILENAME);
        if (networkFile.exists() && false)
        {
            Log.i(MainActivity.TAG, "Loading neural network from: " + NETWORK_FILENAME);
            mNetwork = MultiLayerPerceptron.createFromFile(NETWORK_FILENAME);
        }
        else
        {
            Log.i(MainActivity.TAG, "Creating new neural network...");
            mNetwork = new MultiLayerPerceptron(INPUT_COUNT, HIDDEN_NEURONS, OUTPUT_COUNT);
            mNetwork.randomizeWeights();

            Runnable job = this::learn;
            Thread learner = new Thread(job, "NeuralNet Learning Thread");
            learner.start();
        }
    }

    private void learn()
    {
        // set learning settings
        BackPropagation learningRule = ((MultiLayerPerceptron) mNetwork).getLearningRule();
        learningRule.setLearningRate(0.5);
        learningRule.setMaxError(1E-10);
        learningRule.setMaxIterations(3000);

        // show learning progress
        learningRule.addListener(event ->
        {
            BackPropagation bp = (BackPropagation) event.getSource();
            if (event.getEventType().equals(LearningEvent.Type.LEARNING_STOPPED))
            {
                Log.i(MainActivity.TAG, "Training completed in " + bp.getCurrentIteration() + " iterations");
                Log.i(MainActivity.TAG, "With total error " + bp.getTotalNetworkError());

                mNetwork.save(NETWORK_FILENAME);
                Log.i(MainActivity.TAG, "The network was saved to " + NETWORK_FILENAME);
            }
            else
            {
                Log.i(MainActivity.TAG, "Iteration: " + bp.getCurrentIteration() + " | Error: " + bp.getTotalNetworkError());
            }
        });

        // create a dataset for learning
        DataSet trainingSet = new DataSet(INPUT_COUNT, OUTPUT_COUNT);
        for (Map.Entry<ColorData,double[][]> entry : sTrainingData.entrySet())
        {
            ColorData color = entry.getKey();
            double[][] trainingData = entry.getValue();

            double[] outputs = new double[OUTPUT_COUNT];
            outputs[color.ordinal()] = 1.0;

            for (double[] inputs : trainingData)
            {
                DataSetRow dataRow = new DataSetRow(inputs, outputs);
                trainingSet.addRow(dataRow);
            }
        }
        Log.i(MainActivity.TAG, "Size of the training set: " + trainingSet.size());

        // crete a set of names
        LinkedList<String> names = new LinkedList<>();
        for (ColorData c : ColorData.values()) { names.add(c.name()); }
        String[] labels = names.toArray(new String[names.size()]);

        // set labels for output columns
        mNetwork.setOutputLabels(labels);
        for (int c = 0; c < trainingSet.getOutputSize(); c++) { trainingSet.setColumnName(INPUT_COUNT + c, labels[c]); }

        // we can finally start learning
        mNetwork.learn(trainingSet);
    }

    private ColorData recognize(double[] inputs)
    {
        // calculate the result
        mNetwork.setInput(inputs);
        mNetwork.calculate();

        // find the detected element
        double maxValue = 0.7;
        String maxName = ColorData.EMPTY.name();
        for (Neuron neuron : mNetwork.getOutputNeurons())
        {
            // get the value
            String label = neuron.getLabel();
            double output = neuron.getOutput();

            // compare to our max
            if (output > maxValue)
            {
                maxValue = output;
                maxName = label;
            }
        }

        // convert it back to the enum value
        Log.i(MainActivity.TAG, "Detected " + maxName + " with probablity of " + maxValue);
        return ColorData.valueOf(maxName);
    }

    @Override
    public String getName()
    {
        return NeuronalColorClassifier.class.getSimpleName();
    }

    @Override
    public ColorData classify(ColorRGB color)
    {
        double[] inputs = createInputs(color);
        return recognize(inputs);
    }
}
