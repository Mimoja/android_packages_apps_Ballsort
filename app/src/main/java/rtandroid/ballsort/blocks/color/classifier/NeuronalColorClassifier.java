/*
 * Copyright (C) 2016 RTAndroid Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package rtandroid.ballsort.blocks.color.classifier;

import android.util.Log;

import org.neuroph.core.NeuralNetwork;
import org.neuroph.core.data.DataSet;
import org.neuroph.core.data.DataSetRow;
import org.neuroph.core.events.LearningEvent;
import org.neuroph.nnet.MultiLayerPerceptron;
import org.neuroph.nnet.learning.BackPropagation;

import java.io.File;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;

import rtandroid.ballsort.MainActivity;
import rtandroid.ballsort.blocks.color.ColorConverter;
import rtandroid.ballsort.blocks.color.ColorData;
import rtandroid.ballsort.blocks.color.space.ColorHSV;
import rtandroid.ballsort.blocks.color.space.ColorLAB;
import rtandroid.ballsort.blocks.color.space.ColorRGB;

public class NeuronalColorClassifier implements IColorClassifier
{
    private static final String NETWORK_NAME = "colors.nnet";
    private static final int INPUT_COUNT = (2 + 2 + 2) + (1 + 1 + 1) + (1 + 1 + 1); // RGB + HSV + LAB;
    private static final int OUTPUT_COUNT = ColorData.values().length;
    private static final int HIDDEN_NEURONS = OUTPUT_COUNT * OUTPUT_COUNT;

    private static final double[][] BLACK_DATA = new double[][]
    {
            {0.00390625,0.0,0.00390625,0.0234375,0.0,0.7734375,0.16666666666666666,1.0,0.003921568859368563,0.09278251,0.48422074000000004,0.57892992,},
            {0.00390625,0.0,0.00390625,0.1484375,0.0,0.87109375,0.16666666666666666,1.0,0.003921568859368563,0.09278251,0.48422074000000004,0.57892992,},
            {0.00390625,0.0,0.00390625,0.0546875,0.0,0.796875,0.16666666666666666,1.0,0.003921568859368563,0.09278251,0.48422074000000004,0.57892992,},
            {0.00390625,0.0,0.00390625,0.19921875,0.0,0.90625,0.16666666666666666,1.0,0.003921568859368563,0.09278251,0.48422074000000004,0.57892992,},
            {0.00390625,0.0,0.00390625,0.125,0.0,0.84765625,0.16666666666666666,1.0,0.003921568859368563,0.09278251,0.48422074000000004,0.57892992,},
            {0.00390625,0.0,0.00390625,0.0703125,0.0,0.80859375,0.16666666666666666,1.0,0.003921568859368563,0.09278251,0.48422074000000004,0.57892992,},
            {0.00390625,0.0,0.00390625,0.21484375,0.0,0.91796875,0.16666666666666666,1.0,0.003921568859368563,0.09278251,0.48422074000000004,0.57892992,},
            {0.00390625,0.0,0.00390625,0.15625,0.0,0.87890625,0.16666666666666666,1.0,0.003921568859368563,0.09278251,0.48422074000000004,0.57892992,},
            {0.00390625,0.0,0.00390625,0.01171875,0.0,0.765625,0.16666666666666666,1.0,0.003921568859368563,0.09278251,0.48422074000000004,0.57892992,},
            {0.0,0.0,0.0,0.88671875,0.0,0.6640625,0.0,0.0,0.0,0.0,0.5,0.5,},
    };

    private static final double[][] WHITE_DATA = new double[][]
    {
            {0.0234375,0.0,0.02734375,0.8359375,0.01953125,0.3984375,0.25,0.2857142984867096,0.027450980618596077,0.66429778,0.42369808000000003,0.59411099,},
            {0.03125,0.0,0.03515625,0.703125,0.0234375,0.625,0.21944444444444444,0.3333333432674408,0.03529411926865578,0.8570803,0.4029658100000001,0.6641579199999998,},
            {0.0234375,0.0,0.03125,0.01171875,0.01953125,0.58203125,0.2777777777777778,0.375,0.0313725508749485,0.735813,0.38794047000000004,0.65370701,},
            {0.0234375,0.0,0.02734375,0.828125,0.01953125,0.38671875,0.25,0.2857142984867096,0.027450980618596077,0.66429778,0.42369808000000003,0.59411099,},
            {0.0390625,0.0,0.046875,0.62109375,0.03125,0.6796875,0.25,0.3333333432674408,0.0470588244497776,1.1285955400000003,0.3573021799999999,0.7059879600000002,},
            {0.03125,0.0,0.03515625,0.92578125,0.0234375,0.95703125,0.21944444444444444,0.3333333432674408,0.03529411926865578,0.8570803,0.4029658100000001,0.6641579199999998,},
            {0.03515625,0.0,0.04296875,0.421875,0.02734375,0.828125,0.25,0.3636363744735718,0.04313725605607033,1.02859553,0.3622551900000001,0.7148709500000001,},
            {0.03515625,0.0,0.0390625,0.51171875,0.02734375,0.26953125,0.21944444444444444,0.30000001192092896,0.03921568766236305,0.9570803099999999,0.39801280000000006,0.6552749299999998,},
            {0.0390625,0.0,0.046875,0.01171875,0.03125,0.3125,0.25,0.3333333432674408,0.0470588244497776,1.1285955400000003,0.3573021799999999,0.7059879600000002,},
            {0.03125,0.0,0.03515625,0.6328125,0.0234375,0.63671875,0.21944444444444444,0.3333333432674408,0.03529411926865578,0.8570803,0.4029658100000001,0.6641579199999998,},
            {0.01953125,0.0,0.02734375,0.01953125,0.015625,0.85546875,0.2777777777777778,0.4285714328289032,0.027450980618596077,0.63581299,0.39289348,0.66259,},
            {0.02734375,0.0,0.03125,0.484375,0.01953125,0.86328125,0.21944444444444444,0.375,0.0313725508749485,0.75708029,0.40791882,0.6730409100000001,},
            {0.02734375,0.0,0.03125,0.515625,0.01953125,0.8515625,0.21944444444444444,0.375,0.0313725508749485,0.75708029,0.40791882,0.6730409100000001,},
            {0.0234375,0.0,0.03125,0.2265625,0.01953125,0.640625,0.2777777777777778,0.375,0.0313725508749485,0.735813,0.38794047000000004,0.65370701,},
            {0.03125,0.0,0.0390625,0.0,0.0234375,0.95703125,0.25,0.4000000059604645,0.03921568766236305,0.92859552,0.3672082,0.7237539399999999,},
            {0.03515625,0.0,0.0390625,0.41796875,0.02734375,0.16796875,0.21944444444444444,0.30000001192092896,0.03921568766236305,0.9570803099999999,0.39801280000000006,0.6552749299999998,},
            {0.03125,0.0,0.03515625,0.94140625,0.0234375,0.9609375,0.21944444444444444,0.3333333432674408,0.03529411926865578,0.8570803,0.4029658100000001,0.6641579199999998,},
            {0.03125,0.0,0.0390625,0.3203125,0.02734375,0.203125,0.2777777777777778,0.30000001192092896,0.03921568766236305,0.93581302,0.37803445,0.63594103,},
            {0.03125,0.0,0.03515625,0.51953125,0.0234375,0.51953125,0.21944444444444444,0.3333333432674408,0.03529411926865578,0.8570803,0.4029658100000001,0.6641579199999998,},
            {0.03125,0.0,0.03515625,0.58984375,0.0234375,0.55859375,0.21944444444444444,0.3333333432674408,0.03529411926865578,0.8570803,0.4029658100000001,0.6641579199999998,},
            {0.01953125,0.0,0.0234375,0.43359375,0.015625,0.42578125,0.25,0.3333333432674408,0.0235294122248888,0.5642977700000001,0.42865108999999996,0.6029939800000002,},
            {0.0234375,0.0,0.03125,0.046875,0.01953125,0.59765625,0.2777777777777778,0.375,0.0313725508749485,0.735813,0.38794047000000004,0.65370701,},
            {0.02734375,0.0,0.03125,0.6953125,0.01953125,0.953125,0.21944444444444444,0.375,0.0313725508749485,0.75708029,0.40791882,0.6730409100000001,},
            {0.0234375,0.0,0.02734375,0.77734375,0.01953125,0.4140625,0.25,0.2857142984867096,0.027450980618596077,0.66429778,0.42369808,0.59411099,},
            {0.03125,0.0,0.0390625,0.11328125,0.02734375,0.05078125,0.2777777777777778,0.30000001192092896,0.03921568766236305,0.93581302,0.37803445,0.63594103,},
            {0.03515625,0.0,0.0390625,0.48046875,0.02734375,0.24609375,0.21944444444444444,0.30000001192092896,0.03921568766236305,0.9570803099999,0.3980128000000006,0.655274929999998,},
            {0.0390625,0.0,0.04296875,0.875,0.03125,0.1171875,0.21944444444444444,0.27272728085517883,0.04313725605607033,1.05708032,0.39305979,0.64639194,},
            {0.0390625,0.0,0.046875,0.14453125,0.03125,0.375,0.25,0.3333333432674408,0.0470588244497776,1.1285955400000003,0.3573021799999999,0.7059879600000002,},
            {0.03125,0.0,0.0390625,0.52734375,0.02734375,0.2578125,0.2777777777777778,0.30000001192092896,0.03921568766236305,0.93581302,0.37803445,0.63594103,},
            {0.02734375,0.0,0.03515625,0.03125,0.0234375,0.24609375,0.2777777777777778,0.3333333432674408,0.03529411926865578,0.8358130100000001,0.38298746,0.6448240199999999,},
            {0.0234375,0.0,0.02734375,0.578125,0.01953125,0.203125,0.25,0.2857142984867096,0.027450980618596077,0.66429778,0.42369808000000003,0.59411099,},
            {0.02734375,0.0,0.03125,0.9375,0.0234375,0.1875,0.25,0.25,0.0313725508749485,0.76429779,0.41874507000000005,0.5852280000000001,},
            {0.02734375,0.0,0.03125,0.51953125,0.01953125,0.86328125,0.21944444444444444,0.375,0.0313725508749485,0.75708029,0.40791882,0.6730409100000001,},
            {0.02734375,0.0,0.03125,0.40234375,0.01953125,0.859375,0.21944444444444444,0.375,0.0313725508749485,0.75708029,0.40791882,0.6730409100000001,},
            {0.03515625,0.0,0.0390625,0.765625,0.02734375,0.53125,0.21944444444444444,0.30000001192092896,0.03921568766236305,0.9570803099999999,0.39801280000000006,0.6552749299999998,},
            {0.03125,0.0,0.0390625,0.10546875,0.0234375,0.984375,0.25,0.4000000059604645,0.03921568766236305,0.92859552,0.3672082,0.7237539399999999,},
            {0.03125,0.0,0.03515625,0.98046875,0.0234375,0.890625,0.21944444444444444,0.3333333432674408,0.03529411926865578,0.8570803,0.4029658100000001,0.6641579199999998,},
            {0.03125,0.0,0.03515625,0.625,0.0234375,0.57421875,0.21944444444444444,0.3333333432674408,0.03529411926865578,0.8570803,0.4029658100000001,0.6641579199999998,},
            {0.03125,0.0,0.03515625,0.84765625,0.0234375,0.8515625,0.21944444444444444,0.3333333432674408,0.03529411926865578,0.8570803,0.4029658100000001,0.6641579199999998,},
            {0.03125,0.0,0.03515625,0.84765625,0.0234375,0.79296875,0.21944444444444444,0.3333333432674408,0.03529411926865578,0.8570803,0.4029658100000001,0.6641579199999998,},
            {0.015625,0.0,0.015625,0.8984375,0.01171875,0.38671875,0.16666666666666666,0.25,0.01568627543747425,0.39278253999999996,0.4693617100000001,0.5522809499999999,},
            {0.01171875,0.0,0.015625,0.41796875,0.01171875,0.078125,0.3333333333333333,0.25,0.01568627543747425,0.37151524999999996,0.44938336,0.53294705,},
            {0.01171875,0.0,0.01171875,0.92578125,0.0078125,0.703125,0.16666666666666666,0.3333333432674408,0.0117647061124444,0.29278253000000004,0.47431472,0.56116394,},
            {0.01171875,0.0,0.015625,0.078125,0.0078125,0.796875,0.25,0.5,0.01568627543747425,0.36429775000000003,0.43855710999999997,0.62075996,},
            {0.03515625,0.0,0.0390625,0.27734375,0.0234375,0.99609375,0.20833333333333334,0.4000000059604645,0.03921568766236305,0.94986281,0.38718655,0.7430878399999999,},
            {0.03515625,0.0,0.0390625,0.36328125,0.02734375,0.171875,0.21944444444444444,0.30000001192092896,0.03921568766236305,0.9570803099999999,0.39801280000000006,0.6552749299999998,},
            {0.03515625,0.0,0.04296875,0.05859375,0.02734375,0.6328125,0.25,0.3636363744735718,0.04313725605607033,1.02859553,0.3622551900000001,0.7148709500000001,},
            {0.03515625,0.0,0.0390625,0.5078125,0.02734375,0.23046875,0.21944444444444444,0.30000001192092896,0.03921568766236305,0.9570803099999999,0.39801280000000006,0.6552749299999998,},
            {0.03515625,0.0,0.0390625,0.39453125,0.02734375,0.1875,0.21944444444444444,0.30000001192092896,0.03921568766236305,0.9570803099999999,0.39801280000000006,0.6552749299999998,},
            {0.03125,0.0,0.03515625,0.953125,0.0234375,0.98046875,0.21944444444444444,0.3333333432674408,0.03529411926865578,0.8570803,0.4029658100000001,0.6641579199999998,},
    };

    private static final double[][] EMPTY_DATA =
    {
            {0.0,0.0,0.0,0.87890625,0.0,0.6484375,0.0,0.0,0.0,0.0,0.5,0.5,},
            {0.0,0.0,0.0,0.8046875,0.0,0.6015625,0.0,0.0,0.0,0.0,0.5,0.5,},
            {0.0,0.0,0.0,0.828125,0.0,0.6171875,0.0,0.0,0.0,0.0,0.5,0.5,},
            {0.0,0.0,0.0,0.796875,0.0,0.59375,0.0,0.0,0.0,0.0,0.5,0.5,},
            {0.0,0.0,0.0,0.95703125,0.0,0.7109375,0.0,0.0,0.0,0.0,0.5,0.5,},
            {0.0,0.0,0.0,0.8671875,0.0,0.65234375,0.0,0.0,0.0,0.0,0.5,0.5,},
            {0.0,0.0,0.0,0.890625,0.0,0.671875,0.0,0.0,0.0,0.0,0.5,0.5,},
            {0.0,0.0,0.0,0.96875,0.0,0.72265625,0.0,0.0,0.0,0.0,0.5,0.5,},
            {0.0,0.0,0.0,0.89453125,0.0,0.671875,0.0,0.0,0.0,0.0,0.5,0.5,},
            {0.0,0.0,0.0,0.875,0.0,0.66015625,0.0,0.0,0.0,0.0,0.5,0.5,},
            {0.0,0.0,0.0,0.88671875,0.0,0.66796875,0.0,0.0,0.0,0.0,0.5,0.5,},
            {0.0,0.0,0.0,0.97265625,0.0,0.7265625,0.0,0.0,0.0,0.0,0.5,0.5,},
            {0.0,0.0,0.0,0.8984375,0.0,0.67578125,0.0,0.0,0.0,0.0,0.5,0.5,},
            {0.0,0.0,0.0,0.9453125,0.0,0.703125,0.0,0.0,0.0,0.0,0.5,0.5,},
            {0.0,0.0,0.0,0.875,0.0,0.66015625,0.0,0.0,0.0,0.0,0.5,0.5,},
            {0.0,0.0,0.0,0.88671875,0.0,0.66796875,0.0,0.0,0.0,0.0,0.5,0.5,},
    };

    private static final HashMap<ColorData, double[][]> sTrainingData = new HashMap<>();
    static
    {
        sTrainingData.put(ColorData.BLACK, BLACK_DATA);
        sTrainingData.put(ColorData.WHITE, WHITE_DATA);
        sTrainingData.put(ColorData.EMPTY, EMPTY_DATA);
    }

    private static NeuralNetwork sNetwork = new MultiLayerPerceptron(INPUT_COUNT, HIDDEN_NEURONS, OUTPUT_COUNT);

    public static void learn()
    {
        Log.i(MainActivity.TAG, "Creating new neural sNetwork...");
        sNetwork.randomizeWeights();

        File networkFile = new File(NETWORK_NAME);
        if (networkFile.exists())
        {
            Log.i(MainActivity.TAG, "Loading neural sNetwork from file...");
            sNetwork = MultiLayerPerceptron.createFromFile(NETWORK_NAME);
        }

        // set learning settings
        BackPropagation learningRule = ((MultiLayerPerceptron) sNetwork).getLearningRule();
        learningRule.setLearningRate(0.3);
        learningRule.setMaxError(1E-10);
        learningRule.setMaxIterations(500);

        // show learning progress
        learningRule.addListener(event ->
        {
            BackPropagation bp = (BackPropagation) event.getSource();
            if (event.getEventType().equals(LearningEvent.Type.LEARNING_STOPPED))
            {
                Log.i(MainActivity.TAG, "Training completed in " + bp.getCurrentIteration() + " iterations");
                Log.i(MainActivity.TAG, "With total error " + bp.getTotalNetworkError());
            }
            else
            {
                Log.i(MainActivity.TAG, "Iteration: " + bp.getCurrentIteration() + " | Error: " + bp.getTotalNetworkError());
            }
        });

        // create a dataset for learning
        DataSet trainingSet = new DataSet(INPUT_COUNT, OUTPUT_COUNT);
        for (Map.Entry<ColorData,double[][]> entry : sTrainingData.entrySet())
        {
            ColorData color = entry.getKey();
            double[][] trainingData = entry.getValue();

            double[] outputs = new double[OUTPUT_COUNT];
            outputs[color.ordinal()] = 1.0;

            for (double[] inputs : trainingData)
            {
                DataSetRow dataRow = new DataSetRow(inputs, outputs);
                trainingSet.addRow(dataRow);
            }
        }
        Log.i(MainActivity.TAG, "Size of the training set: " + trainingSet.size());

        // crete a set of names
        LinkedList<String> names = new LinkedList<>();
        for (ColorData c : ColorData.values()) { names.add(c.name().toLowerCase()); }
        String[] labels = names.toArray(new String[names.size()]);

        // set labels for output columns
        for (int c = 0; c < trainingSet.getOutputSize(); c++) { trainingSet.setColumnName(INPUT_COUNT + c, labels[c]); }

        // we can finally start learning
        sNetwork.learn(trainingSet);
        sNetwork.setOutputLabels(labels);
        // sNetwork.save(NETWORK_NAME);
    }

    private static double[] createInputs(ColorRGB colorRGB)
    {
        double[] result = new double[INPUT_COUNT];

        ColorHSV colorHSV = ColorConverter.rgb2hsv(colorRGB);
        ColorLAB colorLAB = ColorConverter.rgb2lab(colorRGB);

        // fill the normalized RGB data
        result[0] = ((colorRGB.R >> 8) & 0xFF) / 256.0;
        result[1] = (colorRGB.R & 0xFF) / 256;
        result[2] = ((colorRGB.G >> 8) & 0xFF) / 256.0;
        result[3] = (colorRGB.G & 0xFF) / 256.0;
        result[4] = ((colorRGB.B >> 8) & 0xFF) / 256.0;
        result[5] = (colorRGB.B & 0xFF) / 256.0;

        // fill the normalized HSV data
        result[6] = colorHSV.H / 360.0;
        result[7] = colorHSV.S;
        result[8] = colorHSV.V;

        // fill the normalized LAB data
        result[9] = colorLAB.L / 10.0;
        result[10] = (colorLAB.A + 5.0) / 10.0;
        result[11] = (colorLAB.B + 5.0) / 10.0;

        StringBuilder builder = new StringBuilder();
        for (double v : result) { builder.append(v).append(","); }
        Log.d(MainActivity.TAG, "{" + builder.toString() + "},");

        for (double v : result)
         if (v < 0.0 || v > 1.0)
         {
             Log.d(MainActivity.TAG, "R: " + result[0]);
             Log.d(MainActivity.TAG, "R: " + result[1]);
             Log.d(MainActivity.TAG, "G: " + result[2]);
             Log.d(MainActivity.TAG, "G: " + result[3]);
             Log.d(MainActivity.TAG, "B: " + result[4]);
             Log.d(MainActivity.TAG, "B: " + result[5]);
             Log.d(MainActivity.TAG, "H: " + result[6]);
             Log.d(MainActivity.TAG, "S: " + result[7]);
             Log.d(MainActivity.TAG, "V: " + result[8]);
             Log.d(MainActivity.TAG, "L: " + result[9]);
             Log.d(MainActivity.TAG, "A: " + result[10]);
             Log.d(MainActivity.TAG, "B: " + result[11]);
         }

        return result;
    }

    private static ColorData recognize(double[] inputs)
    {
        double minDistance = Integer.MAX_VALUE;
        ColorData minName = ColorData.EMPTY;

        // calculate the result
        sNetwork.setInput(inputs);
        sNetwork.calculate();

        // find the detected element
        /*
        String maxName = TRColor.TR_UNKNOWN.name().toLowerCase();
        double maxValue = 0.2;
        for (Neuron neuron : sNetwork.getOutputNeurons())
        {
            // get the value
            String label = neuron.getLabel();
            double output = neuron.getOutput();

            // compare to our max
            if (output > maxValue)
            {
                maxValue = output;
                maxName = label;
            }
        }

        // convert it to the enum value
        TRColor value = TRColor.valueOf(maxName.toUpperCase());
        return new Pair<>(value, maxValue);
        */

        return minName;
    }

    @Override
    public String getName()
    {
        return NeuronalColorClassifier.class.getSimpleName();
    }

    @Override
    public ColorData classify(ColorRGB color)
    {
        double[] inputs = createInputs(color);
        return recognize(inputs);
    }
}
